{"name": "test_information", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "@allure.description(\"信息流接口\")\n    @allure.testcase('http://bug.com/user-login-Lw==.html', name='测试接口')\n    def test_information():\n        # 读取yaml内的数据\n        yaml_data = load_yaml_data.load_data('./yaml_data/yaml_request_data.yaml')\n        # 调用RequestsClass类的post_req方法请求接口\n        response = RequestsClass().post_req(URL=yaml_data['test_information']['URL'],\n                                            data=json.dumps(yaml_data['test_information']['data']),\n                                            headers=yaml_data['test_information']['headers'])\n        # print(response.json())\n        # print(response.status_code)\n>       response_txt = response.json()\n\ntest_case\\test_information3.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\requests\\models.py:898: in json\n    return complexjson.loads(self.text, **kwargs)\n..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\__init__.py:357: in loads\n    return _default_decoder.decode(s)\n..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000013E1C213D00>\ns = '<html>\\r\\n<head><title>404 Not Found</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>404 Not Found</h1></center>\\r\\n<hr><center>openresty</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\decoder.py:355: JSONDecodeError"}, "description": "信息流接口", "attachments": [{"name": "stdout", "source": "301f69c3-fd58-4770-b653-aff5cc7d3f06-attachment.txt", "type": "text/plain"}], "start": 1618481387599, "stop": 1618481387620, "uuid": "a127b785-0611-4062-94f1-9804f39347ea", "historyId": "ac7f4079c168e0d169d5df8db56ab99f", "testCaseId": "1f263197ca3f690220fd3c1d66676c2f", "fullName": "test_case.test_information3#test_information", "labels": [{"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_information3"}, {"name": "host", "value": "zhangfushuai"}, {"name": "thread", "value": "11952-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_information3"}], "links": [{"type": "test_case", "url": "http://bug.com/user-login-Lw==.html", "name": "测试接口"}]}